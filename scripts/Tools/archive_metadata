#!/usr/bin/env python
"""
<<<<<<< HEAD
Gather all the case metadata and send it to the experiments databases
via a web post and SVN check-in
=======
Gather all the case metadata and send it to the experiments database
via a web post.
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
--------------------------
Created September, 2016

Author: CSEG <cseg@cgd.ucar.edu>
"""

<<<<<<< HEAD
from standard_script_setup import *

from CIME.case import Case

import base64
import datetime
import errno
import difflib
import filecmp
import getpass
import glob
import json
import io
import re
import shlex
import shutil
import subprocess
import sys
from string import Template
import textwrap
import urllib, urllib2

logger = logging.getLogger(__name__)

# define global variables
_now = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')
_expdb_url = 'https://csegwebdev.cgd.ucar.edu/expdb2.0'
_JSON_expdb_url = 'https://csegwebdev.cgd.ucar.edu/expdb2.0/cgi-bin/processJSON.cgi'
_SVN_expdb_url = 'https://svn-cesm2-expdb.cgd.ucar.edu/'
_exp_types = ['CMIP6','experiment','development','test']

_XML_vars = ['CASE','COMPILER','COMPSET','CONTINUE_RUN','DOUT_S_ROOT','GRID',
             'MACH','MPILIB','MODEL','MODEL_VERSION','REST_N','REST_OPTION',
             'RUNDIR','RUN_REFCASE','RUN_REFDATE','RUN_STARTDATE',
             'RUN_TYPE','STOP_N','STOP_OPTION','USER']

_run_vars = ['JOB_QUEUE','JOB_WALLCLOCK_TIME','PROJECT']

_archive_list = ['Buildconf','CaseDocs','CaseStatus','LockedFiles',
                 'Macros','README.case','SourceMods','software_environment.txt',
                 'timing','logs','postprocess']

_call_template = Template('in "$function" - Ignoring SVN repo update\n'
                          'SVN error executing command "$cmd". \n'
                          '$error: $strerror')

_copy_template = Template('in "$function" - Unable to copy "$source" to "$dest"'
                          '$error: $strerror')

# file patterns to ignore when checking into SVN
_IGNORE_PATTERNS = ['*.pyc','^.git','tmp','.svn','*~']

# file patterns to ignore when doing comparisons for SVN updates
_EXCLUDE_LIST = ['.svn','archive_files','archive_metadata','case.build',
                 'case.cmpgen_namelists','case.lt_archive','case.run',
                 'case.setup','case.st_archive','case.submit','check_case',
                 'check_input_data','preview_namelists','xmlchange','xmlquery',
                 '.env_mach_specific.csh','.env_mach_specific.sh','Tools',
                 'temp_archive_dir_*', 'archive_files']
=======
from __future__ import print_function

import sys

# check the system python version and require 2.7.x or greater                                                                                                                         
if sys.hexversion < 0x02070000:
    print(70 * "*")
    print("ERROR: {0} requires python >= 2.7.x. ".format(sys.argv[0]))
    print("It appears that you are running python {0}".format(
            ".".join(str(x) for x in sys.version_info[0:3])))
    print(70 * "*")
    sys.exit(1)

#
# built-in modules
#
import argparse
import base64
import datetime
import errno
import getpass
import json
import io
import os, glob, re
import pprint
import shutil
import subprocess
import traceback
import urllib2
import xml.etree.ElementTree as etree

# define global variables
_pp = pprint.PrettyPrinter(indent=4)

_now = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')

_expdb_url = 'https://csegwebdev.cgd.ucar.edu/expdb/cgi-bin/processJSON.cgi'

_SVN_expdb_url = 'https://https://svn-cesm2-expdb.cgd.ucar.edu/'

_exp_types = ['CMIP6','experiment','perfomance','test']

_XML_vars = ['CASE','CASEROOT','COMPILER','COMPSET','CONTINUE_RUN','DOUT_S_ROOT','GRID','MACH','MPILIB',
             'MODEL','JOB_QUEUE','PROJECT','REST_N','REST_OPTION','RUNDIR','RUN_REFCASE','RUN_REFDATE',
             'RUN_STARTDATE','STOP_N','STOP_OPTION','USER','MODEL_VERSION']
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments

# -------------------------------------------------------------------------------
# PasswordPromptAction class
# -------------------------------------------------------------------------------
class PasswordPromptAction(argparse.Action):
    def __init__(self,
             option_strings,
             dest=None,
             nargs=0,
             default=None,
             required=False,
             type=None,
             metavar=None,
             help=None):

        super(PasswordPromptAction, self).__init__(
             option_strings=option_strings,
             dest=dest,
             nargs=nargs,
             default=default,
             required=required,
             metavar=metavar,
             type=type,
             help=help)

    def __call__(self, parser, args, values, option_string=None):
        password = getpass.getpass()
        setattr(args, self.dest, password)

# ---------------------------------------------------------------------
# basic_authorization
# ---------------------------------------------------------------------
def basic_authorization(user, password):
    s = user + ":" + password
    return "Basic " + s.encode("base64").rstrip()

<<<<<<< HEAD
# ---------------------------------------------------------------------
# custom SVN Exception handler
# ---------------------------------------------------------------------
class SVNException(Exception):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)

=======
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
# -------------------------------------------------------------------------------
# commandline_options - parse any command line options
# -------------------------------------------------------------------------------

def commandline_options():
<<<<<<< HEAD
    """ Process the command line arguments.
    """
    parser = argparse.ArgumentParser(
        description='Query and parse the caseroot files to gather metadata information' \
            ' that can be posted to the CESM experiments database.' \
            ' ' \
            ' CMIP6 experiment case names must be reserved already in the' \
            ' experiment database. Please see:' \
            ' https://csesgweb.cgd.ucar.edu/expdb2.0 for details.')

    CIME.utils.setup_standard_logging_options(parser)

=======
    """Process the command line arguments.

    """
    parser = argparse.ArgumentParser(
        description='Query and parse the caseroot files to gather metadata information' \
            ' that can be posted to the experiments database. CMIP6 experiment case names' \
            ' must be reserved already in the experiment database. Please see:' \
            ' https://csesgweb.cgd.ucar.edu/expdb2.0 for details.')

>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
    parser.add_argument('--user', dest='user', type=str, default=None, required=True,
                        help='User name for SVN CESM developer access')

    parser.add_argument('--password', dest='password', action=PasswordPromptAction, type=str, default='', required=True,
                        help='Password for SVN CESM developer access')

<<<<<<< HEAD
=======
    parser.add_argument('--backtrace', action='store_true', 
                        help='Show exception backtraces as extra debugging output')

    parser.add_argument('--debug', required=False, action='store_true',
                        help='Display debugging messages')

>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
    parser.add_argument('--caseroot', nargs=1, required=False, 
                        help='Fully quailfied path to case root directory (optional).' \
                            ' Defaults to current working directory.')

<<<<<<< HEAD
    parser.add_argument('--expType', nargs=1, required=True, choices=_exp_types,
                        help='Experiment type. For CMIP6 experiments, the case must already ' \
                             'exist in the experiments database at URL '\
                             ' http://csegweb.cgd.ucar.edu/expdb2.0. ' \
                             'Must be one of {0}'.format(_exp_types))

    parser.add_argument('--title', nargs=1, required=False, default=None,
                        help='Title of experiment (optional).')

    parser.add_argument('--ignoreRepoUpdate', action='store_true',
                        help='Ignore updating the SVN repository with all the caseroot files.' \
                            ' The experiments database will be updated.')

    parser.add_argument('--ignoreLogs', action='store_true',
                        help='Ignore updating the SVN repository with the caseroot/logs files.' \
                            ' The experiments database and SVN repository will be updated.')

    parser.add_argument('--dryrun', action='store_true',
                        help='Parse settings and print what actions will be taken but' \
                            ' do not execute the action.')

    options = parser.parse_args()

    CIME.utils.handle_standard_logging_options(options)

    return options

# ---------------------------------------------------------------------
# get_case_vars
# ---------------------------------------------------------------------

def get_case_vars(case_dict, case):
    """ get_case_vars
    loop through the global list of XML vars and get the values
    from the case object into a case dictionary

    Arguments:
        case_dict (dict) - case dictionary to store XML variables
        case (object) - case object
    """
    logger.debug('get_case_vars')

    for xml_id in _XML_vars:
        case_dict[xml_id] = case.get_value(xml_id, resolved=True, subgroup=None)

    for xml_id in _run_vars:
        case_dict[xml_id] = case.get_value(xml_id, resolved=True, subgroup='case.run')
=======
    parser.add_argument('--expType', nargs=1, required=True, choices=_exp_types, default='test', 
                        help='Experiment type. Must be one of {0}. Defaults to "test"'.format(_exp_types))

    parser.add_argument('--expName', nargs=1, required=False, type=str, default=None,
                        help='CMIP6 experiment name. This option must be defined if expType is set to CMIP6.')

    parser.add_argument('--ensNum', nargs=1, required=False, default=None,
                        help='Ensemble member number')

    parser.add_argument('--title', nargs=1, required=False, default=None,
                        help='Title of experiment.')

    parser.add_argument('--ignoreRepoUpdate', action='store_true',
                        help='Ignore updating the SVN repository with all the caseroot files' \
                            ' Only the experiments database will be updated.')

    options = parser.parse_args()

    return options

# ---------------------------------------------------------------------
# get_XML_vars
# ---------------------------------------------------------------------

def get_XML_vars(case_dict, debug):
    """ get_XML_vars
    loop through the global list of XML vars and run subprocess
    calls to xmlquery to retrieve them from the caseroot. 

    Arguments:
        case_dict (dict) - case dictionary to store XML variables
        debug (int) - debug flag
    """
    cmd = list()
    for xml_var in _XML_vars:
        cmd = ['{0}/xmlquery'.format(case_dict['case_root']),'-value','{0}'.format(xml_var)]
        value = ''
        try:
            pipe = subprocess.Popen(cmd, cwd=case_dict['case_root'], stdout=subprocess.PIPE)
            value = pipe.communicate()[0]
        except OSError as e:
            print('WARNING archive_metadata xmlquery -value {0}: '.format(xml_var),e.errno, e.strerror)
        case_dict[xml_var] = value

    if debug:
        print('\nDEBUG get_XML_vars case_dict:')
        _pp.pprint(case_dict)
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments

    return case_dict


# ---------------------------------------------------------------------
<<<<<<< HEAD
# check_expdb_case
# ---------------------------------------------------------------------
def check_expdb_case(case_dict):
    """ check_exp_case
=======
# check_exp_case
# ---------------------------------------------------------------------
def check_exp_case(case_dict, debug):
    """check_exp_case
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
    Cross check the casename with the database for a CMIP6 experiment

    Arguments:
        case_dict (dict) - case dictionary to store XML variables
<<<<<<< HEAD

    Return true if a matching casename exists in the database or
    false if not.
    """
    logger.debug('check_expdb_case')
    return True
=======
        debug (int) - debug flag
    """

>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments


# ---------------------------------------------------------------------
# create_JSON
# ---------------------------------------------------------------------

<<<<<<< HEAD
def create_JSON(case_dict):
    """ create_JSON
=======
def create_JSON(case_dict, debug):
    """create_JSON
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
    Create a JSON file in the caseroot/archive_files dir.

    Arguments:
        case_dict (dict) - case dictionary to store XML variables
<<<<<<< HEAD
    """
    logger.debug('create_json')

    if not os.path.exists('{0}/archive_files'.format(case_dict['CASEROOT'])):
        os.makedirs('{0}/archive_files'.format(case_dict['CASEROOT']))

    filename = '{0}/archive_files/json.{1}'.format(case_dict['CASEROOT'], _now)
=======
        debug (int) - debug flag
    """
    if not os.path.exists('{0}/archive_files'.format(case_dict['case_root'])):
        os.makedirs('{0}/archive_files'.format(case_dict['case_root']))
    if debug:
        print('\nDEBUG JSON output of case_dict:')
        _pp.pprint(json.dumps(case_dict))
    filename = '{0}/archive_files/json.{1}'.format(case_dict['case_root'], _now)
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
    with io.open(filename, 'w', encoding='utf-8') as f:
        f.write(unicode(json.dumps(case_dict, indent=4, sort_keys=True, ensure_ascii=True)))

# ---------------------------------------------------------------------
# post_JSON
# ---------------------------------------------------------------------

<<<<<<< HEAD
def post_JSON(case_dict, username, password):
    """ post_JSON
    Post a JSON file in the caseroot/archive_files to the 
    remote expdb URL.

    Arguments:
        case_dict (dict) - case dictionary to store XML variables
        username (string) - SVN developers username
        password (string) - SVN developers password
    """
    logger.debug('post_json')

    response = ''

    data = json.dumps(case_dict)
    params = urllib.urlencode(dict(username=username, password=password, data=data))
    try:
        response = urllib2.urlopen(_JSON_expdb_url, params)
    except urllib2.URLError as url_e:
        logger.info('ERROR archive_metadata URL failed "{0}"'.format(url_e.reason))
    except urllib2.HTTPError as http_e:
        logger.info('ERROR archive_metadata HTTP post failed "{0} - {1}"'.format(http_e.code, http_e.code))
                  
# ---------------------------------------------------------------------
# check_svn
# ---------------------------------------------------------------------
def check_svn():
    """ check_svn

    make sure svn client is installed and accessible
    """
    logger.debug('check_svn')

    cmd = ['svn','--version']
    try: 
        result = subprocess.check_output(cmd)
        if 'version' not in result:
            msg = 'SVN is not available. Ignoring SVN update'
            raise SVNException(msg)
    except subprocess.CalledProcessError as e:
        msg = _SVNError_template.substitute(function='check_svn',cmd=cmd,
                                            error=e.returncode, strerror=e.output)
        logger.info(msg)
        raise SVNException(msg)

# ---------------------------------------------------------------------
# create_temp_archive
# ---------------------------------------------------------------------
def create_temp_archive(case_dict):
    """ create_temp_archive

    Create a temporary SVN sandbox directory in the current caseroot
    """

    c = datetime.datetime.now()
    temp_archive_dir = '{0}/temp_archive_dir_{1}{2}{3}_{4}{5}'.format(case_dict['CASEROOT'], c.year,
                                                                      str(c.month).zfill(2), 
                                                                      str(c.day).zfill(2), 
                                                                      str(c.hour).zfill(2), 
                                                                      str(c.minute).zfill(2))

    logger.debug('create_temp_archive %s',temp_archive_dir)

    if not os.path.exists(temp_archive_dir):
        os.makedirs(temp_archive_dir)

    return temp_archive_dir

# ---------------------------------------------------------------------
# check_svn_repo
# ---------------------------------------------------------------------
def check_svn_repo(case_dict, username, password):
    """ check_svn_repo

    check if a SVN repo exists for this case
    """
    logger.debug('check_svn_repo')

    repo_exists = False
    svn_repo = '{0}/trunk'.format(case_dict['svn_repo_url'])
    cmd = ['svn','list', svn_repo, '--username', username, '--password', password]
    try:
        result = subprocess.check_output(cmd)
        if re.search('README.archive', result):
            repo_exists = True
    except subprocess.CalledProcessError as e:
        msg = 'SVN repo does not exist for this case. A new one will be created.'
        logger.warning(msg)

    return repo_exists


# ---------------------------------------------------------------------
# get_trunk_tag
# ---------------------------------------------------------------------
def get_trunk_tag(case_dict, username, password):
    """ get_trunk_tag

    return the most recent trunk tag as an integer
    """
    logger.debug('get_trunk_tag')

    tag = 0
    svn_repo = '{0}/trunk_tags'.format(case_dict['svn_repo_url'])
    cmd = ['svn','list', svn_repo, '--username', username, '--password', password]
    try: 
        result = subprocess.check_output(cmd)
        last_tag = result.split('\n', 1)[0]
        last_tag = last_tag[:-1].split('_')[-1]
        tag = int(last_tag.strip('0'))
    except subprocess.CalledProcessError as e:
        msg = _call_template.substitute(function='get_trunk_tag',cmd=cmd,
                                        error=e.returncode, strerror=e.output)
        logger.warning(msg)
        raise SVNException(msg)

    return tag

# ---------------------------------------------------------------------
# checkout_repo
# ---------------------------------------------------------------------
def checkout_repo(case_dict, username, password):
    """ checkout_repo

    checkout the repo into the archive_temp_dir
    """
    logger.debug('checkout_repo')

    os.chdir(case_dict['archive_temp_dir'])
    svn_repo = '{0}/trunk'.format(case_dict['svn_repo_url'])
    cmd = ['svn', 'co', '--username', username,'--password', password, svn_repo, '.']
    try:
        result = subprocess.check_call(cmd)
    except subprocess.CalledProcessError as e:
        msg = _call_template.substitute(function='checkout_repo',cmd=cmd,
                                        error=e.returncode, strerror=e.output)
        logger.warning(msg)
        raise SVNException(msg)

    os.chdir(case_dict['CASEROOT'])

# ---------------------------------------------------------------------
# create_readme(case_dict)
# ---------------------------------------------------------------------
def create_readme(case_dict):
    """ create_readme

    Create a generic README.archive file
    """
    logger.debug('create_readme')
    
    os.chdir(case_dict['archive_temp_dir'])
    
    f = open('README.archive','w')
    f.write('Archived metadata is available for this case at URL:\n')
    f.write(_expdb_url)
    f.close()

# ---------------------------------------------------------------------
# copy_diff_files
# ---------------------------------------------------------------------
def copy_diff_files(dcmp, dest, root, archive, caseroot, sub_dir):

    # update existing svn archived files that changed in the caseroot
    for name in dcmp.diff_files:
        logger.info("diff_file %s found in %s and %s" % (name, dcmp.left, dcmp.right))
        os.remove(dcmp.right+'/'+name)
        shutil.copy2(dcmp.left+'/'+name, dest)

    # add any new files to the temp_archive_dir and add them to svn
    for name in dcmp.left_only:
        if name not in archive:
            logger.info("diff_file %s found only in %s" % (name, dcmp.left))
            shutil.copy2(dcmp.left+'/'+name, dest)
            cmd = ['svn', 'add', name]
            try:
                os.chdir(dcmp.right)
                result = subprocess.check_call(cmd)
                os.chdir(dcmp.left)
            except subprocess.CalledProcessError as e:
                msg = _call_template.substitute(function='copy_diff_files',cmd=cmd,
                                                error=e.returncode, strerror=e.output)
                logger.warning(msg)
                raise SVNException(msg)
        
    for sub_dcmp in dcmp.subdirs.values():
        # RECURSION NOT WORKING...
        # build up the new dest
        sub_dir = sub_dir+'/'+os.path.basename(os.path.normpath(sub_dcmp.left))
        new_dest = caseroot +'/'+archive+'/'+sub_dir
        new_root = root+'/'+sub_dir
        new_dcmp = filecmp.dircmp(new_root, new_dest,
                              _EXCLUDE_LIST, _IGNORE_PATTERNS)
        copy_diff_files(new_dcmp, new_dest, new_root, archive, caseroot, sub_dir)

# ---------------------------------------------------------------------
# update_local_repo
# ---------------------------------------------------------------------
def update_local_repo(case_dict, ignoreLogs):
    """ update_local_repo
    
    Compare and update local SVN sandbox
    """    
    logger.debug('update_local_repo')

    dcmp = filecmp.dircmp(case_dict['CASEROOT'], case_dict['archive_temp_dir'], 
                          _EXCLUDE_LIST, _IGNORE_PATTERNS)
    
    archive_temp_dir = os.path.basename(os.path.normpath(case_dict['archive_temp_dir']))
    copy_diff_files(dcmp, case_dict['archive_temp_dir'], case_dict['CASEROOT'], 
                    archive_temp_dir, case_dict['CASEROOT'], '')

    # check if ignoreLogs is specified
    if ignoreLogs:
        os.chdir(case_dict['archive_temp_dir'])
        if os.path.isdir('./logs'):
            try:
                shutil.rmtree('./logs')
            except OSError as e:
                logger.warning('in "update_local_repo" - Unable to remove "logs" in archive dir.')

            cmd = ['svn', 'delete', './logs']
            try:
                result = subprocess.check_call(cmd)
            except subprocess.CalledProcessError as e:
                msg = _call_template.substitute(function='update_lcoal_repo',cmd=cmd,
                                                error=e.returncode, strerror=e.output)
                logger.warning(msg)
                raise SVNException(msg)
         
        if os.path.isdir('./postprocess/logs'):
            os.chdir('./postprocess')
            try:
                shutil.rmtree('./logs')
            except OSError as e:
                logger.warning('in "update_local_repo" - Unable to remove "postprocess/logs" in archive dir.')

            cmd = ['svn', 'delete', './logs']
            try:
                result = subprocess.check_call(cmd)
            except subprocess.CalledProcessError as e:
                msg = _call_template.substitute(function='update_lcoal_repo',cmd=cmd,
                                                error=e.returncode, strerror=e.output)
                logger.warning(msg)
                raise SVNException(msg)

# ---------------------------------------------------------------------
# populate_local_repo
# ---------------------------------------------------------------------
def populate_local_repo(case_dict, ignoreLogs):
    """ populate_local_repo

    Populate local SVN sandbox
    """
    logger.debug('populate_local_repo')

    os.chdir(case_dict['CASEROOT'])

    # loop through the _archive_list and copy to the temp archive dir
    for archive in _archive_list:
        if os.path.isdir(archive):
            try:
                target = case_dict['archive_temp_dir']+'/'+archive
                shutil.copytree(archive, target, symlinks=False, 
                                ignore=shutil.ignore_patterns(_IGNORE_PATTERNS))
            except OSError as e:
                msg = _copy_template.substitute(function='populate_local_repo',
                                                source=archive, dest=case_dict['archive_temp_dir'],
                                                error=e.errno, strerror=e.strerror)
                logger.warning(msg)
        else:
            try:
                shutil.copy2(archive, case_dict['archive_temp_dir'])
            except OSError as e:
                msg = _copy_template.substitute(function='populate_local_repo',
                                                source=archive, dest=case_dict['archive_temp_dir'],
                                                error=e.errno, strerror=e.strerror)
                logger.warning(msg)

    # add files with .xml as the prefix
    xml_files = glob.glob('*.xml')
    for xml_file in xml_files:
        if os.path.isfile(xml_file):
            try:
                shutil.copy2(xml_file, case_dict['archive_temp_dir'])
            except OSError as e:
                msg = _copy_template.substitute(function='populate_local_repo',
                                                source=xml_file, dest=case_dict['archive_temp_dir'],
                                                error=e.errno, strerror=e.strerror)
                logger.warning(msg)
        
    # add files with user_ as the suffix
    user_files = glob.glob('user_*')
    for user_file in user_files:
        if os.path.isfile(user_file):
            try:
                shutil.copy2(user_file, case_dict['archive_temp_dir'])
            except OSError as e:
                msg = _copy_template.substitute(function='populate_local_repo',
                                                source=user_file, dest=case_dict['archive_temp_dir'],
                                                error=e.errno, strerror=e.strerror)
                logger.warning(msg)

        
    # add files with Depends as the suffix
    conf_files = glob.glob('Depends.*')
    for conf_file in conf_files:
        if os.path.isfile(conf_file):
            try:
                shutil.copy2(conf_file, case_dict['archive_temp_dir'])
            except OSError as e:
                msg = _copy_template.substitute(function='populate_local_repo',
                                                source=conf_file, dest=case_dict['archive_temp_dir'],
                                                error=e.errno, strerror=e.strerror)
                logger.warning(msg)

        
    # add files with casename as the suffix
    case_files = glob.glob('{0}.*'.format(case_dict['CASE']))
    for case_file in case_files:
        if os.path.isfile(case_file):
            try:
                shutil.copy2(case_file, case_dict['archive_temp_dir'])
            except OSError as e:
                msg = _copy_template.substitute(function='populate_local_repo',
                                                source=case_file, dest=case_dict['archive_temp_dir'],
                                                error=e.errno, strerror=e.strerror)
                logger.warning(msg)


    # check if ignoreLogs is specified
    if ignoreLogs:
        os.chdir(case_dict['archive_temp_dir'])
        if os.path.isdir('./logs'):
            try:
                shutil.rmtree('./logs')
            except OSError as e:
                logger.warning('in "populate_local_repo" - Unable to remove "logs" in archive dir.')
        
        if os.path.isdir('./postprocess/logs'):
            os.chdir('./postprocess')
            try:
                shutil.rmtree('./logs')
            except OSError as e:
                logger.warning('in "populate_local_repo" - Unable to remove "postprocess/logs" in archive dir.')


# ---------------------------------------------------------------------
# checkin_trunk
# ---------------------------------------------------------------------
def checkin_trunk(case_dict, svn_cmd, message,  username, password):
    """ checkin_trunk

    Check in the local SVN sandbox to the remote trunk
    """
    logger.debug('checkin_trunk')

    os.chdir(case_dict['archive_temp_dir'])
    svn_repo = '{0}/trunk'.format(case_dict['svn_repo_url'])
    msg = '"{0}"'.format(message)

    cmd = ['svn', svn_cmd, '--username', username, '--password', password, '.', '--message', msg]
    if svn_cmd in ['import']:
        cmd = ['svn', svn_cmd, '--username', username, '--password', password, '.', svn_repo, '--message', msg]

    # check-in the trunk to svn
    try:
        result = subprocess.check_call(cmd)
    except subprocess.CalledProcessError as e:
        msg = _call_template.substitute(function='checkin_trunk',cmd=cmd,
                                        error=e.returncode, strerror=e.output)
        logger.warning(msg)
        raise SVNException(msg)

    if svn_cmd in ['import']:
        # create the trunk_tags dir
        tags = '{0}/trunk_tags'.format(case_dict['svn_repo_url'])
        msg = '"create trunk_tags"'
        cmd = ['svn', 'mkdir', tags, '--username', username, '--password', password, '--message', msg]
        try:
            result = subprocess.check_call(cmd)
        except subprocess.CalledProcessError as e:
            msg = _call_template.substitute(function='checkin_trunk',cmd=cmd,
                                            error=e.returncode, strerror=e.output)
            logger.warning(msg)
            raise SVNException(msg)


# ---------------------------------------------------------------------
# create_tag
# ---------------------------------------------------------------------
def create_tag(case_dict, new_tag, username, password):
    """ create_tag

    create a new trunk tag in the remote repo
    """
    logger.debug('create_tag')

    # create a new trunk tag
    os.chdir(case_dict['archive_temp_dir'])
    svn_repo = '{0}/trunk'.format(case_dict['svn_repo_url'])
    svn_repo_tag = '{0}/trunk_tags/{1}'.format(case_dict['svn_repo_url'],new_tag)
    msg = '"create new trunk tag"'
    cmd = ['svn', 'copy', '--username', username, '--password', password, svn_repo, svn_repo_tag, '--message', msg]
    try:
        result = subprocess.check_call(cmd)
    except subprocess.CalledProcessError as e:
        msg = _call_template.substitute(function='checkin_trunk',cmd=cmd,
                                        error=e.returncode, strerror=e.output)
        logger.warning(msg)
        raise SVNException(msg)
=======
def post_JSON(case_dict, username, password, debug):
    """create_JSON
    Create a JSON file in the caseroot/archive_files dir.

    Arguments:
        case_dict (dict) - case dictionary to store XML variables
        debug (int) - debug flag
    """
## check that username and passwowrd are not empty strings
    response = ''
    request = urllib2.Request(_expdb_url,
             headers = {
             "Authorization": basic_authorization(username, password), 
             "Content-Type": "application/json",
             "User-Agent": "CESM/archive_metadata",
             }, data = json.dumps(case_dict))
    try:
        response = urllib2.urlopen(request)
    except urllib2.URLError as url_e:
        _pp.pprint('ERROR archive_metadata URL failed "{0}"'.format(url_e.reason))
    except urllib2.HTTPError as http_e:
        _pp.pprint('ERROR archive_metadata HTTP post failed "{0} - {1}"'.format(http_e.code, http_e.code))
                  
    if debug:
        print('\nDEBUG URL post response:')
        _pp.pprint(response)

>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments

# ---------------------------------------------------------------------
# update_repo
# ---------------------------------------------------------------------
<<<<<<< HEAD
def update_repo(ignoreLogs, case_dict, username, password):
    """ update_repo

    Update SVN repo
    """
    logger.debug('update_repo')

    try:
        # check if svn client is installed
        check_svn()

        # check if the case repo exists
        case_dict['svn_repo_url'] = '{0}/{1}'.format(_SVN_expdb_url, case_dict['CASE'])
        repo_exists = check_svn_repo(case_dict, username, password)
        case_dict['archive_temp_dir'] = create_temp_archive(case_dict)

        if repo_exists:
            # need to update trunk and make a new tag
            last_tag = get_trunk_tag(case_dict, username, password)
            new_tag = '{0}_{1}'.format(case_dict['CASE'],str(last_tag+1).zfill(4))
            checkout_repo(case_dict, username, password)
            update_local_repo(case_dict, ignoreLogs)
            msg = 'update case metadata for {0} by {1}'.format(case_dict['CASE'],username)
            checkin_trunk(case_dict, 'ci', msg, username, password)
            create_tag(case_dict, new_tag, username, password)
            logger.info('SVN repository trunk updated to URL "%s"', case_dict['svn_repo_url'])
            logger.info('   and a new trunk tag created for  "%s"', new_tag)
        else:
            # create a new case repo
            new_tag = '{0}_0001'.format(case_dict['CASE'])
            create_readme(case_dict)
            populate_local_repo(case_dict, ignoreLogs)
            msg = 'initial import of case metadata for {0} by {1}'.format(case_dict['CASE'],username)
            checkin_trunk(case_dict, 'import', msg, username, password)
            create_tag(case_dict, new_tag, username, password)
            logger.info('SVN repository imported to trunk URL "%s"', case_dict['svn_repo_url'])
            logger.info('   and a new trunk tag created for  "%s"', new_tag)

    except SVNException as e:
        pass

    return case_dict
=======
def update_repo():

    pass

>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments

# ---------------------------------------------------------------------
# initialize_main
# ---------------------------------------------------------------------
def initialize_main(options):
<<<<<<< HEAD
    """ initialize_main

    Initialize the case dictionary data structure with command line options
    """
    logger.debug('intialize_main')

    case_dict = dict()

    case_dict['CASEROOT'] = os.getcwd()
    if options.caseroot:
        case_dict['CASEROOT'] = options.caseroot[0]

    username = None
    if options.user:
        username = options.user

    password = None
    if options.password:
        password = options.password
=======

    case_dict = dict()

    case_dict['case_root'] = os.getcwd()
    if options.caseroot:
        case_dict['case_root'] = options.caseroot[0]

    username = None
    if options.user:
        username = options.user[0]

    password = None
    if options.password:
        password = options.password[0]
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments

    if options.expType:
        case_dict['expType'] = options.expType[0]

<<<<<<< HEAD
=======
    case_dict['expName'] = None
    if options.expName:
        case_dict['expName'] = options.expName[0]

    case_dict['ensNum'] = None
    if options.ensNum:
        case_dict['ensNum'] = options.ensNum[0]

>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
    case_dict['title'] = None
    if options.title:
        case_dict['title'] = options.title[0]

<<<<<<< HEAD
    case_dict['dryrun'] = False
    if options.dryrun:
        case_dict['dryrun'] = True
            
    # make sure the caseroot/xmlquery exists
    xmlquery = '{0}/xmlquery'.format(case_dict['CASEROOT'])
    if not os.path.isfile(xmlquery) or not os.access(xmlquery, os.X_OK):
        logger.warning('ERROR archive_metadata unable to execute "%s"',xmlquery)
=======
    # check the expType against the casename for CMIP6 experiments
    if (case_dict['expType'].lower() == 'cmip6'):
        if (case_dict['expName'] is None):
            print('ERROR archive_metadata you must specify a CMIP6 experiment name.')
            sys.exit(1)
            
    # make sure the caseroot/xmlquery exists
    xmlquery = '{0}/xmlquery'.format(case_dict['case_root'])
    if not os.path.isfile(xmlquery) or not os.access(xmlquery, os.X_OK):
        print('ERROR archive_metadata unable to execute {0}'.format(xmlquery))
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
        sys.exit(1)

    return case_dict, username, password

# ---------------------------------------------------------------------
# main
# ---------------------------------------------------------------------

def main(options):
    """ main

    Arguments:
        options (list) - input options from command line
    """
<<<<<<< HEAD
    logger.debug('main')

    (case_dict, username, password) = initialize_main(options)
 
    # loop through the _XML_vars gathering values
    with Case(case_dict['CASEROOT'], read_only=True) as case:
        case_dict = get_case_vars(case_dict, case)
=======
    debug = options.debug
    (case_dict, username, password) = initialize_main(options)
 
    # loop through the _XML_vars gathering values
    case_dict = get_XML_vars(case_dict, debug)
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments

    # check that the casename is reserved in the expdb 
    # for CMIP6 experiments
    if (case_dict['expType'].lower() == 'cmip6'):
<<<<<<< HEAD
        if not check_expdb_case(case_dict):
            logger.info('Unable to archive CMIP6 metadata. '
                        '"%s" casename does not exist in database. '
                        'All CMIP6 experiments casenames must be '
                        'reserved in the experiments database at URL: '
                        '   https://csegweb.cgd.ucar.edu/expdb2.0'
                        'prior to running archive_metadata.',case_dict['CASE'])
            sys.exit(1)

    # create / update the cesm expdb repo with the caseroot files
    if not options.ignoreRepoUpdate:
        case_dict = update_repo(options.ignoreLogs, case_dict,
                                username, password)

    # create a JSON file with the date appended
    create_JSON(case_dict)

    # post the JSON to the remote DB
##    post_JSON(case_dict, username, password)

    # clean-up the temporary archive files dir
    if os.path.exists(case_dict['archive_temp_dir']):
        shutil.rmtree(case_dict['archive_temp_dir'])

    logger.info('Successful completion of archive_metadata')


#===================================                                                           
if __name__ == "__main__":

    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

=======
        check_exp_case(case_dict, debug)

    # create a JSON file with the date appended
    create_JSON(case_dict, debug)

    # post the JSON to the remote DB
    post_JSON(case_dict, username, password, debug)

    # create / update the cesm expdb repo with the caseroot files
    if not options.ignoreRepoUpdate:
        update_repo()

#===================================                                                           
if __name__ == "__main__":
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
    options = commandline_options()
    try:
        status = main(options)
        sys.exit(status)
    except Exception as error:
        print(str(error))
<<<<<<< HEAD
=======
        if options.backtrace:
            traceback.print_exc()
>>>>>>> initial rewrite of archive_metadata into python with all command line args for CMIP6 experiments
        sys.exit(1)
