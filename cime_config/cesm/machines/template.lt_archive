#!/usr/bin/env python
# Batch system directives
{{ batchdirectives }}

"""
template to create a case long term archiving script. This should
only ever be called by case.submit when running from a batch system. 
This script only exists as a way of providing batch directives 
when used with case.submit --job case.lt_archive.

The long term archiving script may also be submitted directly
from the command line using case.lt_archive on a login node. 

See the DOUT_L_* XML settings in env_run.xml for
options to the case.lt_archive script. 
"""

import sys
import os
os.chdir( '{{ caseroot }}' )

_LIBDIR = os.path.join("{{ cimeroot }}", "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup          import *
from CIME.case                      import Case
from CIME.case_lt_archive           import case_lt_archive

logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(args, description):
###############################################################################

    parser = argparse.ArgumentParser(
        usage="""\n%s [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m#  %s \033[0m
""" % ((os.path.basename(args[0]), ) * 4),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("--caseroot", default=os.getcwd(),
                        help="Case directory to build")

    parser.add_argument("--dryrun", action='store_true',
                        help="Print the actions to be taken by the script " \
                            "but don't execute them.")

    parser.add_argument("--force", action='store_true',
                        help="Execute the long term archive commands " \
                            "regardless of the current run or short term " \
                            "archiver status. Use with caution.")

    args = parser.parse_args()

    CIME.utils.handle_standard_logging_options(args)

    if args.caseroot is not None:
        os.chdir(args.caseroot)

    return args.caseroot, args.dryrun, args.force

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    (caseroot, dryrun, force) = parse_command_line(sys.argv, description)
    with Case(caseroot) as case:
        success = case_lt_archive(case, dryrun, force)

    sys.exit(0 if success else 1)

###############################################################################

if __name__ == "__main__":
    _main_func(__doc__)
